<?php

/**
 * @file
 * Provide administration interface for relation type bundles.
 */

/**
 * Implements hook_entity_type_alter().
 */
function relation_ui_entity_type_alter(array &$entity_types) {
  $entity_types['relation']->setViewBuilderClass('Drupal\Core\Entity\EntityViewBuilder');
  $entity_types['relation']->setListClass('Drupal\relation_ui\RelationListController');
  $entity_types['relation']->setFormClass('default', 'Drupal\relation_ui\RelationFormController');
  $entity_types['relation']->setFormClass('edit', 'Drupal\relation_ui\RelationFormController');
  $entity_types['relation']->setFormClass('delete', 'Drupal\relation_ui\Form\RelationFormController');
  $entity_types['relation']->setLinkTemplate('admin-form', 'relation_ui.type_edit');
  $entity_types['relation']->setLinkTemplate('edit-form', 'relation_ui.edit');
  $entity_types['relation']->setLinkTemplate('delete-form', 'relation_ui.delete_confirm');

  $entity_types['relation_type']->setListClass('Drupal\relation_ui\RelationTypeListController');
  $entity_types['relation_type']->setFormClass('add', 'Drupal\relation_ui\RelationTypeFormController');
  $entity_types['relation_type']->setFormClass('edit', 'Drupal\relation_ui\RelationTypeFormController');
  $entity_types['relation_type']->setFormClass('delete', 'Drupal\relation_ui\Form\RelationTypeDeleteConfirm');
  $entity_types['relation_type']->setLinkTemplate('add-form', 'relation_ui.type_edit');
  $entity_types['relation_type']->setLinkTemplate('edit-form', 'relation_ui.type_edit');
  $entity_types['relation_type']->setLinkTemplate('delete-form', 'relation_ui.type_delete');
}

/**
 * Implements hook_menu_link_defaults().
 */
function relation_ui_menu_link_defaults() {
  $links['admin/structure/relation'] = array(
    'link_title' => 'Relation types',
    'parent' => 'system.admin.structure',
    'description' => 'Manage relation types, including relation properties (directionality, transitivity etc), available bundles, and fields.',
    'route_name' => 'relation_ui.type_list',
  );
  return $links;
}

/**
 * Generate relations
 */
function relation_ui_generate_form($form, &$form_state) {
  $relation_types = entity_load_multiple('relation_type');

  if (empty($relation_types)) {
    $form['explanation']['#markup'] = t("Before you can generate relations, you need to define one or more !link.", array("!link" => l(t('relation types'), 'admin/structure/relation')));
    return $form;
  }
  foreach ($relation_types as $relation_type) {
    $options[$relation_type->id()] = array(
      'label' => $relation_type->label(),
    );
  }

  $header = array(
    'label' => t('Relation type'),
  );

  $form['relation_types'] = array(
    '#type' => 'tableselect',
    '#title' => t('Relation types'),
    '#description' => t('Select relation types to create relations from. If no types are selected, relations will be generated for all types.'),
    '#options' => $options,
    '#header' => $header,
  );
  $form['relation_kill'] = array(
    '#type' => 'checkbox',
    '#title' => t('Delete all relations in these relation types before generating new relations'),
  );

  $form['relation_number'] = array(
    '#type' => 'number',
    '#title' => t('How many relations would you like to generate of each type?'),
    '#default_value' => 10,
    '#size' => 10,
    '#min' => 0,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Generate'),
  );
  return $form;
}

function relation_ui_generate_form_submit($form, &$form_state) {
  $number = $form_state['values']['relation_number'];
  $relation_types = $form_state['values']['relation_types'];
  $kill = $form_state['values']['relation_kill'];
  include_once drupal_get_path('module', 'relation') . '/relation.drush.inc';
  $relation_types = array_keys(array_filter($relation_types));
  $relation_types = empty($relation_types) ? NULL : $relation_types;
  $rids = relation_generate_relations($number, $relation_types, $kill);
}

/**
 * Apply filters for relation administration filters based on session.
 *
 * @param $query
 *   A SelectQuery to which the filters should be applied.
 */
function relation_ui_build_filter_query($query) {
  if (!empty($_SESSION['relation_filters'])) {
    $query->join('field_data_endpoints', 'e', 'e.entity_id = r.rid');
    $query->distinct();
    foreach ($_SESSION['relation_filters'] as $filter => $values) {
      if (empty($values)) {
        continue;
      }
      switch ($filter) {
        case 'bundle':
          $query->condition('r.relation_type', array_keys($values), 'IN');
          break;
        case 'endpoints_entity_type':
          $query->condition('e.endpoints_entity_type', $values);
          break;
        case 'endpoints_entity_id':
          $query->condition('e.endpoints_entity_id', $values);
          break;
      }
    }
  }
}

/**
 * Implements hook_theme().
 */
function relation_ui_theme() {
  $theme = array(
    'relation' => array(
      'render element' => 'elements',
      'template' => 'relation',
    ),
    'relation_ui_admin_content' => array(
      'variables' => array('relations' => NULL)
    ),
  );
  return $theme;
}

/**
 * Prepares variables for relation templates.
 *
 * Default template: relation.html.twig.
 */
function template_preprocess_relation(&$variables) {
  $variables['relation'] = $variables['elements']['#relation'];

  $variables += array('content' => array());
  foreach (element_children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}