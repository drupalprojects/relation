<?php

/**
 * @file
 * Provide administration interface for relation type bundles.
 */

/**
 * Implements hook_entity_info_alter().
 */
function relation_ui_entity_info_alter(&$entity_info) {
  $entity_info['relation']['route_base_path'] = "admin/structure/relation/manage/{bundle}";
  $entity_info['relation']['controllers'] += array(
    'list' => 'Drupal\relation_ui\RelationListController',
    'form' => array(
      'add' => 'Drupal\relation_ui\RelationTypeFormController',
      'edit' => 'Drupal\relation_ui\RelationTypeFormController',
      'delete' => 'Drupal\relation_ui\Form\RelationTypeDeleteConfirm',
    ),
  );
  $entity_info['relation']['links'] += array(
    "canonical" => "/relation/{relation}",
    "edit-form" => "/relation/{relation}/edit",
    "version-history" => "/relation/{relation}/revisions"
  );
  $entity_info['relation_type']['links'] += array(
    "edit-form" => "admin/structure/relation/manage/{relation_type}",
  );
  $entity_info['relation_type']['controllers'] += array(
    'list' => 'Drupal\relation_ui\RelationTypeListController',
    'form' => array(
      'add' => 'Drupal\relation_ui\RelationTypeFormController',
      'edit' => 'Drupal\relation_ui\RelationTypeFormController',
      'delete' => 'Drupal\relation_ui\Form\RelationTypeDeleteConfirm',
    ),
  );
}

/**
 * Implements hook_menu().
 */
function relation_ui_menu() {
//   $items['relation/%relation'] = array(
//     'title callback' => 'relation_ui_page_title',
//     'title arguments' => array(1),
//     'access arguments' => array('access relations'),
//     'page callback' => 'entity_view',
//     'page arguments' => array(1, 'full'),
//   );
//   $items['relation/%relation/view'] = array(
//     'title' => 'View',
//     'type' => MENU_DEFAULT_LOCAL_TASK,
//     'weight' => -10,
//   );
//   $items['relation/%relation/edit'] = array(
//     'title' => 'Edit',
//     'access arguments' => array('edit relations'),
//     'page callback' => 'entity_get_form',
//     'page arguments' => array(1),
//     'type' => MENU_LOCAL_TASK,
//   );
//   $items['relation/%relation/delete'] = array(
//     'title' => 'Delete',
//     'page callback' => 'drupal_get_form',
//     'page arguments' => array('relation_ui_delete_confirm', 1),
//     'access arguments' => array('delete relations'),
//     'weight' => 10,
//     'type' => MENU_LOCAL_TASK,
//     'context' => MENU_CONTEXT_INLINE,
//   );
//   if (module_exists('devel')) {
//     $items['relation/%relation/devel'] = array(
//       'title' => 'Devel',
//       'page callback' => 'devel_load_object',
//       'page arguments' => array('relation', 1),
//       'access arguments' => array('access devel information'),
//       'type' => MENU_LOCAL_TASK,
//       'file path' => drupal_get_path('module', 'devel') . '/',
//       'file' => 'devel.pages.inc',
//       'weight' => 100,
//     );
//   }
  $items['admin/structure/relation'] = array(
    'title' => 'Relation types',
    'description' => 'Manage relation types, including relation properties (directionality, transitivity etc), available bundles, and fields.',
    'route_name' => 'relation_ui.type_list',
  );
  $items['admin/structure/relation/manage/%relation_type'] = array(
    'title' => 'Edit relation type',
    'title callback' => 'relation_ui_type_page_title',
    'title arguments' => array(4),
    'route_name' => 'relation_ui.type_edit',
  );
  $items['admin/structure/relation/manage/%relation_type/edit'] = array(
    'title' => 'Edit',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
//   $items['admin/config/development/generate/relation'] = array(
//     'title' => 'Generate relations',
//     'access arguments' => array('administer relation types'),
//     'page callback' => 'drupal_get_form',
//     'page arguments' => array('relation_ui_generate_form'),
//     'description' => 'Generate relations for testing.',
//   );
//   $items['relation/endpoints_type/autocomplete'] = array(
//     'type' => MENU_CALLBACK,
//     'access arguments' => array('administer relations'),
//     'file' => 'relation_ui.module',
//     'page callback' => 'relation_ui_endpoints_type_autocomplete',
//   );
  return $items;
}

/**
 * Menu callback: ask for confirmation of relation deletion.
 */
function relation_ui_delete_confirm($form, &$form_state, Drupal\relation\RelationInterface $relation) {
  $form['#relation'] = $relation;
  $uri = $relation->uri();

  return confirm_form($form,
    t('Are you sure you want to delete relation %id?', array('%id' => $relation->id())),
    $uri['path'],
    t('This action cannot be undone.'),
    t('Delete'),
    t('Cancel')
  );
}

/**
 * Executes relation deletion.
 */
function relation_ui_delete_confirm_submit($form, &$form_state) {
  if ($form_state['values']['confirm']) {
    $relation = $form['#relation'];
    $relation->delete();
    $replacements = array('@bundle' => $relation->bundle(), '%id' => $relation->id());
    watchdog('relation', '@bundle: deleted %id.', $replacements);
    drupal_set_message(t('@bundle %id has been deleted.', $replacements));
  }

  $form_state['redirect'] = '<front>';
}

/**
 * Generate relations
 */
function relation_ui_generate_form($form, &$form_state) {
  $relation_types = entity_load_multiple('relation_type');

  if (empty($relation_types)) {
    $form['explanation']['#markup'] = t("Before you can generate relations, you need to define one or more !link.", array("!link" => l(t('relation types'), 'admin/structure/relation')));
    return $form;
  }
  foreach ($relation_types as $relation_type) {
    $options[$relation_type->id()] = array(
      'label' => $relation_type->label(),
    );
  }

  $header = array(
    'label' => t('Relation type'),
  );

  $form['relation_types'] = array(
    '#type' => 'tableselect',
    '#title' => t('Relation types'),
    '#description' => t('Select relation types to create relations from. If no types are selected, relations will be generated for all types.'),
    '#options' => $options,
    '#header' => $header,
  );
  $form['relation_kill'] = array(
    '#type' => 'checkbox',
    '#title' => t('Delete all relations in these relation types before generating new relations'),
  );

  $form['relation_number'] = array(
    '#type' => 'number',
    '#title' => t('How many relations would you like to generate of each type?'),
    '#default_value' => 10,
    '#size' => 10,
    '#min' => 0,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Generate'),
  );
  return $form;
}

function relation_ui_generate_form_submit($form, &$form_state) {
  $number = $form_state['values']['relation_number'];
  $relation_types = $form_state['values']['relation_types'];
  $kill = $form_state['values']['relation_kill'];
  include_once drupal_get_path('module', 'relation') . '/relation.drush.inc';
  $relation_types = array_keys(array_filter($relation_types));
  $relation_types = empty($relation_types) ? NULL : $relation_types;
  $rids = relation_generate_relations($number, $relation_types, $kill);
}

/**
 * Filter form for relation administration list.
 */
function relation_ui_filter_form($form, $form_state) {
  if (isset($_SESSION['relation_filters'])) {
    foreach($_SESSION['relation_filters'] as $filter => $values) {
      $$filter = $values;
    }
  }
  $bundles = array();
  foreach (entity_load_multiple('relation_type') as $relation_type) {
    $bundles[$relation_type->id()] = $relation_type->label();
  }

  $form['filters'] = array(
    '#type' => 'fieldset',
    '#title' => t('Show only items where'),
    '#theme' => 'exposed_filters__relation',
  );
  $form['filters']['bundle'] = array(
    '#title' => t('relation type'),
    '#type' => 'select',
    '#default_value' => isset($bundle) ? array_keys($bundle) : NULL,
    '#multiple' => TRUE,
    '#options' => $bundles,
    '#size' => (count($bundles) < 10) ? count($bundles) : 10,
  );
  $form['filters']['endpoints_entity_type'] = array(
    '#title' => t('endpoint type'),
    '#type' => 'textfield',
    '#default_value' => isset($endpoints_entity_type) ? $endpoints_entity_type : NULL,
    '#autocomplete_path' => 'relation/endpoints_type/autocomplete'
  );
  $form['filters']['endpoints_entity_id'] = array(
    '#title' => t('endpoint ID'),
    '#type' => 'textfield',
    '#default_value' => isset($endpoints_entity_id) ? $endpoints_entity_id : NULL,
  );
  $form['filters']['actions'] = array(
    '#type' => 'actions',
    '#attributes' => array('class' => array('container-inline')),
  );
  $form['filters']['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Filter'),
  );
  $form['filters']['actions']['reset'] = array(
    '#type' => 'submit',
    '#value' => t('Reset'),
  );
  $form['#submit'] = array('relation_ui_filter_form_submit');
  return $form;
}

/**
 * Submit handler for filter form
 */
function relation_ui_filter_form_submit($form, $form_state) {
  form_state_values_clean($form_state);
  if ($form_state['triggering_element']['#value'] == t('Reset')) {
    unset($_SESSION['relation_filters']);
  }
  else {
    $_SESSION['relation_filters'] = $form_state['values'];
  }
}

/**
 * Apply filters for relation administration filters based on session.
 *
 * @param $query
 *   A SelectQuery to which the filters should be applied.
 */
function relation_ui_build_filter_query($query) {
  if (!empty($_SESSION['relation_filters'])) {
    $query->join('field_data_endpoints', 'e', 'e.entity_id = r.rid');
    $query->distinct();
    foreach ($_SESSION['relation_filters'] as $filter => $values) {
      if (empty($values)) {
        continue;
      }
      switch ($filter) {
        case 'bundle':
          $query->condition('r.relation_type', array_keys($values), 'IN');
          break;
        case 'endpoints_entity_type':
          $query->condition('e.endpoints_entity_type', $values);
          break;
        case 'endpoints_entity_id':
          $query->condition('e.endpoints_entity_id', $values);
          break;
      }
    }
  }
}

/**
 * Menu callback for admin/content/relation. Displays all relations on the site.
 */
function relation_ui_admin_content() {
  // Set up header row.
  $header = array(
    'label' => array('data' => t('Title'), 'field' => 'r.rid', 'sort' => 'asc'),
    'type' => array('data' => t('Type'), 'field' => 'r.relation_type'),
    t('Relation'),
    'operations' => array('data' => t('Operations'), 'colspan' => '2'),
  );

  // Grab all relations.
  $query = db_select('relation', 'r')
    ->extend('Drupal\Core\Database\Query\PagerSelectExtender')
    ->extend('Drupal\Core\Database\Query\TableSortExtender')
    ->limit(50)
    ->fields('r', array('rid', 'relation_type'))
    ->orderByHeader($header);
  relation_ui_build_filter_query($query);
  $result = $query->execute();
  $relation_ids = array();
  foreach ($result as $relation) {
    $relation_ids[] = $relation->rid;
  }
  $relations = entity_load_multiple('relation', $relation_ids);

  $form = drupal_get_form('relation_ui_filter_form');
  $filter_form = drupal_render($form);

  return $filter_form . theme('relation_ui_admin_content', array('relations' => $relations, 'header' => $header));
}

/**
 * Generate a table of all relations on this site.
 */
function theme_relation_ui_admin_content($variables) {
  $relations = $variables['relations'];
  $header = $variables['header'];

  $rows = array();
  if (empty($relations)) {
    // Give a message if there are no relations returned.
    $message = t('There are currently no relations on your site.');

    $rows[] = array(
      array('data' => $message, 'colspan' => 5),
    );
  }
  else {
    foreach ($relations as $relation) {
      // Get the endpoints for this relation.
      $endpoints = field_get_items($relation, 'endpoints');

      $relation_entities = array();
      if (!empty($endpoints)) {
        foreach ($endpoints as $endpoint) {
          $entity = entity_load($endpoint['entity_type'], $endpoint['entity_id']);
          $path = $entity->uri();

          // Logic to process how the different entities return a uri.
          // see this issue: http://drupal.org/node/1057242
          if ($endpoint['entity_type'] == 'file') {
            $path = array('path' => file_create_url($path));
          }
          if ($endpoint['entity_type'] == 'taxonomy_vocabulary') {
            $path = array('path' => 'admin/structure/taxonomy/' . $entity->machine_name);
          }
          $relation_entities[] = array('title' => $entity->label(), 'path' => $path['path']);
        }
      }

      // Build the column for the relation entities.
      $relation_column = array();
      foreach ($relation_entities as $entity) {
        $relation_column[] = l($entity['title'], $entity['path']);
      }

      // Build the rows to pass to the table theme function.
      // Directional is implemented, not sure how well it works.

      $destination = drupal_get_destination();
      $options = array(
       'attributes' => array(),
       'query' => array(
          'destination' => $destination['destination'],
        ),
      );

      $endpoint_separator = ', ';
      $type_label = '';
      // Get the type for this relation
      if ($relation_type = entity_load('relation_type', $relation->bundle())) {
        $endpoint_separator = $relation_type->directional ? " → " : " ↔ ";
        $type_label = $relation_type->label();
      }
      $rows[] = array(
        l(t('Relation') . ' ' . $relation->rid, 'relation/' . $relation->rid),
        $type_label,
        implode($endpoint_separator, $relation_column),
        $relation->access('update') ? l(t('Edit'), 'relation/' . $relation->rid . '/edit', $options) : '',
        $relation->access('delete') ? l(t('Delete'), 'relation/' . $relation->rid . '/delete', $options) : '',
      );
    }
  }

  return theme('table', array('header' => $header, 'rows' => $rows)) . theme('pager');
}

/**
 * Relation display page title callback.
 */
function relation_ui_page_title($relation) {
  return 'Relation ' . $relation->rid;
}

/**
 * Relation type display/edit page title callback.
 */
function relation_ui_type_page_title(Drupal\relation\RelationTypeInterface $relation_type) {
  return $relation_type->label();
}

/**
 * Implements hook_theme().
 */
function relation_ui_theme() {
  $theme = array(
    'relation_ui_admin_content' => array(
      'variables' => array('relations' => NULL)
    ),
  );
  return $theme;
}

/**
 * Autocomplete function for endpoint type filter.
 */
function relation_ui_endpoints_type_autocomplete($string = '') {
  $result = db_query("SELECT distinct endpoints_entity_type FROM {field_data_endpoints} WHERE endpoints_entity_type LIKE :string", array(":string" => db_like($string) . '%'));
  $matches = array();
  while ($res = $result->fetchObject()) {
    $matches[$res->endpoints_entity_type] = $res->endpoints_entity_type;
  }
  drupal_json_output($matches);
}
