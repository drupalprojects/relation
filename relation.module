<?php

require_once dirname(__FILE__) . '/relation.rules.inc';
if (module_exists('ctools')) {
  require_once dirname(__FILE__) . '/relation.ctools.inc';
}

/**
 * @file
 * Describes relations between entities.
 */

/**
 * Implements hook_entity_bundle_info().
 */
function relation_entity_bundle_info() {
  $bundles = array();

  // Cannot use entity_load* due to recursion.
  $relation_types = db_select('relation_type', 'rt')
    ->fields('rt', array('relation_type', 'label'))
    ->execute();

  foreach ($relation_types as $relation_type) {
    $bundles['relation'][$relation_type->relation_type] = array(
      'label' => $relation_type->label,
      'admin' => array(
        'real path' => 'admin/structure/relation/manage/' . $relation_type->relation_type,
      ),
    );
  }
  return $bundles;
}

/**
 * Implements hook_entity_property_info().
 */
function relation_entity_property_info() {
  $info = array();
  $properties = &$info['relation']['properties'];

  $properties = array(
    'rid' => array(
      'label' => t('Relation ID'),
      'description' => t('The internal numeric ID of the relation.'),
      'type' => 'integer',
      'schema field' => 'rid',
    ),
    'relation_type' => array(
      'label' => t('Relation type'),
      'type' => 'token',
      'description' => t('The type of the relation.'),
      'setter callback' => 'entity_property_verbatim_set',
      'setter permission' => 'administer nodes',
      'options list' => 'relation_get_relation_types_options',
      'required' => TRUE,
      'schema field' => 'relation_type',
    ),
    'endpoints' => array(
      'label' => t('Endpoints'),
      'type' => 'list<entity>',
      'description' => t('The endpoints of the relation.'),
      'setter callback' => 'relation_rules_set_endpoints',
      'getter callback' => 'relation_rules_get_endpoints',
      'setter permission' => 'administer nodes',
      'required' => TRUE,
    ),
  );
  return $info;
}

/**
 * Implements hook_entity_property_info_alter().
 */
function relation_entity_property_info_alter(&$info) {
  // Add relation type-specific information, so that it is easily available
  // for modules that need to introspect the
  // relation structure (ie. Search API).
  foreach (entity_load_multiple('relation_type') as $relation_type) {
    foreach ($relation_type->source_bundles as $key => $bundles) {
      list($entity_type, $bundle) = explode(':', $bundles, 2);
      $info['relation']['bundles'][$bundle]['properties']['endpoints_source_' . $entity_type] = array(
        'label' => t('@type (source endpoint)', array('@type' => $entity_type)),
        'type' => 'list<' . $entity_type . '>',
        'getter callback' => 'relation_rules_get_specific_endpoints',
        'endpoint_type' => 'source',
        'relation_directional' => $relation_type->directional,
      );
    }

    foreach ($relation_type->target_bundles as $key => $bundles) {
      list($entity_type, $bundle) = explode(':', $bundles, 2);
      $info['relation']['bundles'][$bundle]['properties']['endpoints_target_' . $entity_type] = array(
        'label' => t('@type (target endpoint)', array('@type' => $entity_type)),
        'type' => 'list<' . $entity_type . '>',
        'getter callback' => 'relation_rules_get_specific_endpoints',
        'endpoint_type' => 'target',
        'relation_directional' => $relation_type->directional,
      );
    }

    $source_bundles = $relation_type->source_bundles;
    $original_sb = array_values($source_bundles);
    $directional = FALSE;
    // If its a directional relation, merge the source and target bundles.
    if (count($relation_type->target_bundles) >= 1) {
      $original_tb = array_values($relation_type->target_bundles);
      $target_bundles = array_merge($source_bundles, $relation_type->target_bundles);
      $source_bundles = $target_bundles;
      $directional = TRUE;
    }
    else {
      $target_bundles = $source_bundles;
    }
    foreach ($target_bundles as $target_key => $target_bundle) {
      list($entity_target) = explode(':', $target_bundle, 2);
      foreach ($source_bundles as $source_key => $source_bundle) {
        $property_reverse = ($directional && !in_array($source_bundle, $original_sb) && !in_array($target_bundle, $original_tb));
        $property = ($property_reverse) ? 'relation_' . $relation_type->id() . '_' . $entity_target . '_reverse' : 'relation_' . $relation_type . '_' . $entity_target;
        list($entity_source) = explode(':', $source_bundle, 2);
        if (!$directional || ($property_reverse) || (in_array($target_bundle, $original_tb) && in_array($source_bundle, $original_sb))) {
          $info[$entity_source]['properties'][$property] = array(
            'label' => t('Relation @relation_type (to @entity' . (($property_reverse) ? ' reverse)' : ')'), array('@relation_type' => $relation_type, '@entity' => $entity_target)),
            'type' => 'list<' . $entity_target . '>',
            'relation_type' => $relation_type->id(),
            'target_type' => $entity_target,
            'description' => t("A list of entities related."),
            'getter callback' => 'relation_rules_get_related_entities',
          );
        }
      }
    }
  }
}

/**
 * Implements hook_permission().
 */
function relation_permission() {
  return array(
    'administer relation types' => array(
      'title' => t('Administer Relation types'),
      'description' => t('Create, edit, delete, and perform administration tasks for relation types.'),
    ),
    'export relation types' => array(
      'title' => t('Export Relation types'),
    ),
    'access relations' => array(
      'title' => t('View Relations'),
      'description' => t('Grant access to view the endpoints of Relations.'),
    ),
    'create relations' => array(
      'title' => t('Create Relations'),
    ),
    'edit relations' => array(
      'title' => t('Edit Relations'),
    ),
    'delete relations' => array(
      'title' => t('Delete Relations'),
    ),
    'administer relations' => array(
      'title' => t('Administer Relations'),
    ),
  );
}

/**
 * Loads a relation type entity.
 *
 * @param $relation_id
 *   The machine name of the relation type (bundle) to be loaded.
 *
 * @return \Drupal\relation\Plugin\Core\Entity\RelationType
 */
function relation_type_load($relation_id) {
  return entity_load('relation_type', $relation_id);
}

/**
 * Returns all relation types suitable for #options property on elements.
 */
function relation_get_relation_types_options() {
  $options = array();
  foreach (entity_load_multiple('relation_type') as $relation_type) {
    $options[$relation_type->id()] = $relation_type->label();
  }
  return $options;
}

/**
 * Deletes a relation type (bundle).
 *
 * @param $relation_type
 *   The machine name of the relation type (bundle) to be deleted.
 */
function relation_type_delete($relation_type) {
  db_delete('relation_type')->condition('relation_type', $relation_type)->execute();
  db_delete('relation_bundles')->condition('relation_type', $relation_type)->execute();

  if (field_read_instance('relation', 'endpoints', $relation_type)) {
    $instance = array(
      'field_name' => 'endpoints',
      'entity_type' => 'relation',
      'bundle' => $relation_type,
    );
    field_delete_instance($instance, FALSE);
  }
}

/**
 * Loads a relation from a relation id.
 *
 * @param $rid
 *   Numerical id of the relation to be loaded.
 *
 * @return
 *   Loaded relation object. Relation objects are stdClass Object of the form:
 *   - rid: numeric relation id.
 *   - relation_type: relation bundle machine name.
 *   - arity: the number of entities in the relation
 *   - rdf_mapping: not yet implemented (empty array)
 *   - endpoints: Field holding the entities that make up the relation.
 *     Field columns are:
 *     - entity_type: The type of the entity (eg. node).
 *     - entity_id: Numeric entity ID.
 */
function relation_load($rid) {
  return entity_load('relation', $rid);
}

/**
 * Checks if a relation exists.
 *
 * The following example demonstrates how to check if a relation of type
 * 'likes' exists between two entities, user 17 and node 253.
 *
 * @code
 *   $endpoints = array(
 *     array('entity_type' => 'user', 'entity_id' => 17),
 *     array('entity_type' => 'node', 'entity_id' => 253),
 *   );
 *   $relation_type = 'likes';
 *   $results = relation_relation_exists($endpoints, $relation_type);
 * @endcode
 *
 * @param array $endpoints
 *   An array containing endpoints. Each endpoint is an array with keys 
 *   'entity_type' and 'entity_id'.
 * @param $relation_type
 *   (Optional) The relation type (bundle) of the relation to be checked.
 * @param $enforce_direction
 *   (Optional) Whether to enforce direction as specified in $endpoints.
 *
 * @return array
 *   Array of Relation ID's keyed by revision ID.
 */
function relation_relation_exists($endpoints, $relation_type = NULL, $enforce_direction = FALSE) {
  $query = Drupal::entityQuery('relation');
  foreach ($endpoints as $r_index => $endpoint) {
    relation_query_add_related($query, $endpoint['entity_type'], $endpoint['entity_id'], $enforce_direction ? $r_index : NULL);
  }
  if ($relation_type) {
    $query->condition('relation_type', $relation_type);
  }
  $query->condition('arity', count($endpoints));
  // Avoid Node Access restrictions when checking for a relation
  $query->addTag('DANGEROUS_ACCESS_CHECK_OPT_OUT');
  // If direction of the relation is not forced make sure the each endpoint
  // is counted just once.
  if (!$enforce_direction) {
    $query->addTag('enforce_distinct_endpoints');
  }
  return $query->execute();
}

/**
 * Implements hook_query_TAG_alter().
 *
 * Adds conditions to query to ensure different r_index for each endpoint.
 */
function relation_query_enforce_distinct_endpoints_alter(Drupal\Core\Database\Query\AlterableInterface $query) {
  // Get arity of the query
  foreach ($query->conditions() as $condition) {
    if ($condition['field'] == 'relation.arity') {
      $arity = $condition['value'];
      break;
    }
  }
  // Add r_index conditions between all endpoints
  for ($i = 0; $i < $arity; $i++) {
    for ($k = $i + 1; $k < $arity; $k++) {
      // @see http://drupal.org/node/1859084, http://drupal.org/node/1760026
      // For now each endpoint condition adds 2 joins to the query. Add
      // conditions between even numbers.
      $left_suffix = !$i ? '' : '_' . $i*2;
      $right_suffix = !$k ? '' : '_' . $k*2;
      $column_left = 'field_data_endpoints' . $left_suffix . '.endpoints_r_index';
      $column_right = 'field_data_endpoints' . $right_suffix . '.endpoints_r_index';
      $query->where("$column_left != $column_right");
    }
  }
}

/**
 * Clear the cache for a set of endpoints.
 *
 * @param $endpoints
 *   An array of endpoints, with entity_type and entity_id as keys.
 */
function relation_clear_related_entities_cache($endpoints) {
  drupal_static_reset('relation_get_related_entity');
  foreach ($endpoints as $endpoint) {
    cache()->delete('relation:' . $endpoint['entity_type'] . ':' . $endpoint['entity_id'], 'cache', TRUE);
  }
}

/**
 * Constructs and saves a simple relation.
 *
 * @param $relation_type
 *   The relation type machine name.
 * @param $endpoints
 *   A list of endpoint entities. Each endpoint is defined by an associate
 *   array, with an entity_type and entity_id key. For example:
 *   @code
 *   array(
 *     array('entity_type' => 'node', 'entity_id' => 1),
 *     array('entity_type' => 'user', 'entity_id' => 5),
 *   array);
 *   @endcode
 *
 * @return \Drupal\relation\Plugin\Core\Entity\Relation
 *   A saved relation.
 */
function relation_insert($relation_type, $endpoints) {
  $relation = entity_create('relation', array('relation_type' => $relation_type));
  $relation->endpoints[LANGUAGE_NOT_SPECIFIED] = $endpoints;
  $relation->save();
  return $relation;
}

/**
 * Gets a relation's URI.
 *
 * @see entity_uri()
 */
function relation_uri(Drupal\relation\RelationInterface $relation) {
  return array('path' => 'relation/' . $relation->rid);
}

/**
 * Gets a relation type's URI.
 *
 * @see entity_uri()
 */
function relation_type_uri(Drupal\relation\RelationTypeInterface $relation_type) {
  return array('path' => 'admin/structure/relation/manage/' . $relation_type->relation_type);
}

/**
 * Returns a query object to find related entities.
 *
 * @param $entity_type
 *   (optional) The entity type of one of the endpoints.
 * @param $entity_id
 *   (optional) The entity id of one of the endpoints. Can also be an array of
 *   entity IDs.
 * @param $r_index
 *   (optional) The index of the search entity in the relation to be found
 *   (0 = source, 1 = target).
 *
 * @return RelationQuery
 *   The query object itself.
 *   
 *   @todo deprecate this
 */
function relation_query($entity_type = NULL, $entity_id = NULL, $r_index = NULL) {
  $query = Drupal::entityQuery('relation');
  relation_query_add_related($query, $entity_type, $entity_id, $r_index);
  return $query;
}

/**
 * Add a related entity to the query.
 *
 * @param QueryInterface $query
 * @param $entity_type
 *   Entity type of the related entity.
 * @param $entity_id
 *   Entity id of the related entity. Can be an array of entity IDs.
 * @param $r_index
 *   The index of the related entity within the requested relation(s).
 *
 * @todo rename. / extend class ala RelationQuery::related()
 *
 * @return Drupal\Core\Entity\Query\QueryInterface
 */
function relation_query_add_related(Drupal\Core\Entity\Query\QueryInterface $query, $entity_type, $entity_id, $r_index = NULL) {
  $group = $query->andConditionGroup()
    ->condition('endpoints.entity_type', $entity_type, '=')
    ->condition('endpoints.entity_id', $entity_id, NULL);

  if (isset($r_index)) {
    $group->condition('endpoints.r_index', $r_index, '=');
  }

  $query->condition($group);
  return $query;
}

/**
 * Returns a related entity.
 *
 * Returns the entity object of the first other entity in the first relation
 * that matches the given conditions. Do not expect to get exactly what you
 * want, especially if you have multiple relations of the same type on the
 * search entity.
 *
 * @param $entity_type
 *   The entity type of one of the endpoints.
 * @param $entity_id
 *   The entity id of one of the endpoints.
 * @param $relation_type
 *   (optional) The relation type of the relation to find.
 * @param $r_index
 *   (optional) The index of the search entity in the relation to be found
 *   (0 = source, 1 = target).
 *
 * @return
 *   The entity object from the other endpoint.
 */
function relation_get_related_entity($entity_type, $entity_id, $relation_type = NULL, $r_index = NULL) {

  // Static cache the results of relation_query() and relation_load() to avoid
  // duplicate queries if this is called multiple times with the same arguments
  // during a request.
  $items = &drupal_static(__FUNCTION__);
  $request_key = "$entity_type:$entity_id";
  $cache_key = "$request_key:$relation_type:$r_index";

  if (isset($items[$cache_key])) {
    $entities = $items[$cache_key];
  }
  elseif ($cached = cache()->get("relation:$cache_key")) {
    $entities = $cached->data;
    $items[$cache_key] = $entities;
  }
  else {
    $query = Drupal::entityQuery('relation');
    relation_query_add_related($query, $entity_type, $entity_id, $r_index)
      ->range(0, 1);
    if ($relation_type) {
      $query->condition('relation_type', $relation_type);
    }
    $results = $query->execute();
    $relation_id = reset($results);

    if ($relation_id) {
      $relation = entity_load('relation', $relation_id);
      if ($relation->arity == 1) {
        $entities = FALSE;
      }
      else {
        $entities = field_get_items($relation, 'endpoints');
      }
    }
    else {
      $entities = FALSE;
    }
    cache()->set("relation:$cache_key", $entities);

    $items[$cache_key] = $entities;
  }

  if ($entities) {
    $first_entity_key = $entities[0]['entity_type'] . ':' . $entities[0]['entity_id'];
    if (isset($r_index)) {
      $request_key = $request_key . ':' . $r_index;
      $first_entity_key = $first_entity_key . ':' . $entities[0]['r_index'];
    }
    if ($request_key == $first_entity_key) {
      return entity_load($entities[1]['entity_type'], $entities[1]['entity_id']);
    }
    return entity_load($entities[0]['entity_type'], $entities[0]['entity_id']);
  }

  return FALSE;
}

/**
 * Returns the relation types that can have the given entity as an endpoint.
 *
 * @param $entity_type
 *   The entity type of the endpoint.
 * @param $bundle
 *   The bundle of the endpoint.
 * @param $endpoint
 *   (optional) the type of endpoint. This is only used for directional
 *   relation types. Possible options are 'source', 'target', or 'both'.
 *
 * @return array
 *   An array of relation types
 */
function relation_get_available_relation_types($entity_type, $bundle, $endpoint = 'source') {
  $bundle_key = $entity_type . ':' . $bundle;
  $all_bundle_key = $entity_type . ':*';
  $available_types = array();

  foreach (entity_load_multiple('relation_type') as $relation_type) {
    $available = FALSE;
    if ($endpoint == 'source' || $endpoint == 'both') {
      if (in_array($bundle_key, $relation_type->source_bundles) || in_array($all_bundle_key, $relation_type->source_bundles)) {
        $available = TRUE;
      }
    }
    if ($endpoint == 'target' || $endpoint == 'both') {
      if (in_array($bundle_key, $relation_type->target_bundles) || in_array($all_bundle_key, $relation_type->target_bundles)) {
        $available = TRUE;
      }
    }
    if ($available) {
      $available_types[] = $relation_type;
    }
  }
  
  return $available_types;
}

/**
 * Implements hook_entity_delete().
 */
function relation_entity_delete(Drupal\Core\Entity\EntityInterface $entity) {
  if ($entity->entityType() == 'relation') {
    $endpoints = field_get_items($entity, 'endpoints');
    relation_clear_related_entities_cache($endpoints);
  }

  // Delete relations to this entity.
  $relation_ids = relation_query($entity->entityType(), $entity->id())->execute();
  $relations_to_delete = array(); // ids of relations to delete
  foreach (entity_load_multiple('relation', $relation_ids) as $relation) {
    // Remove any endpoints pointing to entity
    foreach ($relation->endpoints[LANGUAGE_NOT_SPECIFIED] as $key => $endpoint) {
      if ($endpoint['entity_id'] == $entity->id()
        && $endpoint['entity_type'] == $entity->entityType()) {
        unset($relation->endpoints[LANGUAGE_NOT_SPECIFIED][$key]);
      }
    }
    // Check if relation remains valid with regards to arity
    $relation_type = relation_type_load($relation->relation_type);
    $arity = count($relation->endpoints[LANGUAGE_NOT_SPECIFIED]);
    if ($arity < $relation_type->min_arity) {
      // Not valid - delete
      array_push($relations_to_delete, $relation->id());
    }
    else {
      // Valid - save
      $relation->save();
    }
  }
  if (!empty($relations_to_delete)) {
    entity_delete_multiple('relation', $relations_to_delete);  
    drupal_set_message(t('Relations @relations have been deleted.', array('@relations' => implode(', ', $relations_to_delete))));
  }
}

/**
 * Implements hook_views_api().
 */
function relation_views_api() {
  return array(
    'api' => 3.0,
    'path' => drupal_get_path('module', 'relation') . '/views',
  );
}